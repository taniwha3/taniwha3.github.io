Below is a ready‑to‑paste “seed file” you can drop into a repository ( e.g., /PROJECT_PLAN.md ).
It gives a coding‑oriented LLM everything it needs: project scope, directory map, coding standards, and a chain of 24 atomic tasks (T‑01 → T‑24) with unambiguous acceptance criteria.
Feel free to adjust owners/dates, but keep task IDs unchanged so automated agents can reference them.

⸻


# Project: “Subnetting Curriculum Builder v1.0”
Author (s): <YOUR NAME>  Start Date: <YYYY‑MM‑DD>

## 0  Purpose
Automate creation of a beginner‑friendly IPv4/IPv6 subnetting course.  
Outputs include:

* Human‑readable curriculum in Markdown (one file per module).  
* Auto‑graded practice sets & unit tests (Python 3, `pytest`).  
* Lightweight HTML quiz pages (no external JS frameworks).  
* Continuous‑integration workflow to run the tests (GitHub Actions).

All content derives from the specification in **Appendix A** (full curriculum text).

---

## 1  Repository Layout  (target end‑state)

/
├── README.md
├── LICENSE
├── .github/
│   └── workflows/ci.yml
├── curriculum/
│   ├── Module00_Orientation.md
│   ├── Module01_BinaryMath.md
│   └── … (up to Module09)
├── quizzes/
│   ├── m01_binary.html
│   └── …
├── graders/
│   ├── m01_binary.py
│   └── …
├── tests/
│   ├── test_m01_binary.py
│   └── …
└── utils/
└── common.py

---

## 2  Coding & Style Rules (apply repo‑wide)

* **Python 3.11+**, standard library only.  
* Follow **PEP 8** & **PEP 257**; run `ruff` + `black --line-length 88`.  
* All Markdown files use **ATX headings**, 80‑column soft‑wrap, GitHub‑flavored tables.  
* HTML quizzes must work in a local browser without a server (pure client‑side JS).  
* Unit tests use `pytest`; ≥ 95 % coverage required for graders/utilities.

---

## 3  Task List

| ID | Title | Prereq | Deliverables | Acceptance (CI) |
|----|-------|--------|--------------|-----------------|
| **T‑01** | Init repo scaffold | – | `.gitignore`, empty dir tree above | `ls -R` matches layout skeleton |
| **T‑02** | Add MIT LICENSE | T‑01 | `LICENSE` | File contains standard MIT text |
| **T‑03** | Write high‑level `README.md` | T‑01 | `README.md` | Explains project, badges build|test |
| **T‑04** | Copy curriculum spec to `curriculum/00_spec_reference.md` | T‑01 | File with Appendix A verbatim | SHA‑256 of file matches spec provided |
| **T‑05** | Generate Module00 Markdown | T‑04 | `Module00_Orientation.md` | Contains Objectives, Activities, Assessment, Sticking Pts |
| **T‑06** | Module00 5‑question HTML quiz | T‑05 | `quizzes/m00_orientation.html` | Loads locally; shows score on submit |
| **T‑07** | Module00 grader script | T‑05 | `graders/m00_orientation.py` | `python graders/m00_orientation.py --answer-file sample.json` returns pass/fail |
| **T‑08** | Pytest for Module00 grader | T‑07 | `tests/test_m00_orientation.py` | `pytest -q` passes |
| **T‑09** | GitHub Actions CI | T‑08 | `.github/workflows/ci.yml` | On push: run `ruff`, `black --check`, `pytest` |
| **T‑10** | Generate Module01 Markdown | T‑05 | `Module01_BinaryMath.md` | Follows template, includes conversion table |
| **T‑11** | Module01 quiz (10 decimal↔binary Qs) | T‑10 | `quizzes/m01_binary.html` | Auto‑scores; uses client‑side JS |
| **T‑12** | Module01 grader | T‑10 | `graders/m01_binary.py` | CLI: `--dec2bin 13` prints `00001101` etc. |
| **T‑13** | Tests for Module01 grader | T‑12 | `tests/test_m01_binary.py` | 100 % pass |
| **T‑14** | Utility `common.py` (shared helpers) | T‑12 | `utils/common.py` | Houses power‑of‑two table generator |
| **T‑15** | Generate Module02 Markdown | T‑10 | `Module02_BitwiseAND.md` | Includes truth table |
| **T‑16** | Module02 grader + tests (AND logic) | T‑15 | `graders/m02_and.py`, `tests/test_m02_and.py` | Given IP & mask, outputs network |
| **T‑17** | Generate Module03 Markdown | T‑10 | `Module03_IPv4_Anatomy.md` | Explains octets; shows historical classes |
| **T‑18** | Generate Module04 Markdown | T‑10 | `Module04_Masks_CIDR.md` | Includes mask ladder table |
| **T‑19** | Grader+tests for mask↔slash | T‑18 | `graders/m04_mask.py`, tests | Converts both ways, validates |
| **T‑20** | Generate Module05 Markdown | T‑10 | `Module05_FixedLength.md` | Hosts, subnets formulae, worked example |
| **T‑21** | Grader+tests for Module05 (subnet calc) | T‑20 | `graders/m05_subnet.py`, tests | Given network & new /, outputs ranges |
| **T‑22** | Generate Modules06‑09 Markdown | T‑20 | One file each (06‑09) | Follows pattern; correct headings |
| **T‑23** | Quizzes & graders for Modules06‑09 | T‑22 | HTML & Python scripts | Each quiz min 5 Qs; tests cover graders |
| **T‑24** | Coverage badge & finalize docs | All | Updated `README.md` | CI badge shows ≥ 95 % coverage |

**Notes**

* Tasks are **atomic**; open PR per task.  
* If a task introduces new Python, add/extend tests in the same task.  
* No task should exceed ~120 LoC diff.  
* Where random data needed (quizzes) seed RNG with constant value for reproducibility.

---

## 4  General LLM Guidelines

1. **Respond only with the files changed** in each task (Unix “patch” style) unless otherwise specified.  
2. After finishing a task, output **`#DONE T‑xx`** on its own line so orchestration can detect completion.  
3. Never modify files outside the scope listed in the current task.  
4. If requirements seem ambiguous, halt and output a *clarification question* — do not guess.

---

## Appendix A  Subnetting Curriculum Specification (v1.0)

*(Paste the full curriculum you produced earlier here, verbatim.  Truncated below for brevity.)*

Module 0 Orientation & Pre‑Assessment

Objectives: …
…

Module 9 Verification & Troubleshooting Tools

…



How to use this file
	1.	Save everything above as PROJECT_PLAN.md at repo root.
	2.	Feed Task T‑01 (only) to your coding‑LLM/agent.
	3.	After it returns #DONE T‑01, automatically feed it T‑02, and so on.
	4.	CI will guarantee each gate is met before the pipeline advances.

This gives the LLM a crystal‑clear, bite‑sized roadmap to build your subnetting‑curriculum project end‑to‑end with minimal human babysitting.

